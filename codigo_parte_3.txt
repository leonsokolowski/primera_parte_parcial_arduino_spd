#define A 9
#define B 10
#define C 4
#define D 5
#define E 6
#define F 8
#define G 7
#define pulsador_mas 13
#define pulsador_menos 12
#define pulsador_reset 11
#define DisplayOn 10
#define decena A4
#define unidad A5
#define Apagados 1
#define Switch 3
#define FSR A0
#define Fotoresistencia A3
#define Sol 2

int countDigit = 0;
int sumaPrevia = 1;
int restaPrevia = 1;
int resetPrevia = 1;
int valorSwitch;
int numero = 0;

void setup() 
{
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);

    pinMode(pulsador_mas, INPUT_PULLUP);
    pinMode(pulsador_menos, INPUT_PULLUP);
    pinMode(pulsador_reset, INPUT_PULLUP);

    pinMode(decena, OUTPUT);
    pinMode(unidad, OUTPUT);
    digitalWrite(decena, LOW);
    digitalWrite(unidad, LOW);

  	pinMode(Switch, INPUT);
  
  	pinMode(Sol, OUTPUT);
  
    Serial.begin(9600);
}

int fsrReading = 0;
int fotorresistencia = 0;

void loop()
{
  fsrReading = analogRead(FSR);
  fotorresistencia = analogRead(Fotoresistencia);
  Serial.println(fotorresistencia);
  if(fsrReading == 0)
{
  	valorSwitch = digitalRead(Switch);
  	if (valorSwitch == 1)
  	{
      int pressed = KeyPressed();
      if (pressed == pulsador_mas)
      {
        countDigit++;
         if (countDigit > 99)
         {
            countDigit = 0;
         }
      }
      else if (pressed == pulsador_menos)
      {
         countDigit--;
         if (countDigit < 0)
         {
             countDigit = 99;
         }
      }
      else if (pressed == pulsador_reset)
      {
         countDigit = 0;
      }
      
      printCount(countDigit);
      if (fotorresistencia <= 10 && countDigit >= 35)
    	{
        digitalWrite(Sol, HIGH);
        }
      else if (fotorresistencia > 10 || countDigit < 35)
        {
		digitalWrite(Sol, LOW);
        }
    }
    
  
  if (valorSwitch == 0)
  {
    int pressed = KeyPressed();
      if (pressed == pulsador_mas)
      {
         countDigit = obtenerNumeroPrimoSiguiente(countDigit);
      	 if (countDigit > 99)
         {
            countDigit = 0;
         }
      }
      else if (pressed == pulsador_menos)
      {
         countDigit = obtenerNumeroPrimoAnterior(countDigit);
      	 if (countDigit <= 1)
         {
             countDigit = 97;
         }
      }
      else if (pressed == pulsador_reset)
      {
         countDigit = 0;
         
      }
   		printCount(countDigit);
  }
  }
  else
  {
    printCount(fsrReading);
    Serial.println(fsrReading);
    countDigit = 0;
  }
    delay(25);
}

void printDigit(int digit)
{
    digitalWrite(A, LOW);
    digitalWrite(B, LOW);
    digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, LOW);
    digitalWrite(F, LOW);
    digitalWrite(G, LOW);

    switch (digit)
    {
    case 0:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
        break;
    case 1:
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        break;
    case 2:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        break;
    case 3:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(D, HIGH);
        break;
    case 4:
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(F, HIGH);
        break;
    case 5:
        digitalWrite(A, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        break;
    case 6:
        digitalWrite(A, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
        break;
    case 7:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        break;
    case 8:
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(G, HIGH);
        break;
    case 9:
        digitalWrite(A, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(C, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(F, HIGH);
        break;
    }
}

void prendeDigito(int digito)
{

    if (digito == unidad)
    {
        digitalWrite(unidad, LOW);
      	digitalWrite(decena, HIGH);
      	delay(DisplayOn);
    }
    else if (digito == decena)
    {
        digitalWrite(decena, LOW);
      	digitalWrite(unidad, HIGH);
     	delay(DisplayOn);
    }
  	else
    {	
    	digitalWrite(decena, HIGH);
      	digitalWrite(unidad, HIGH);
    }
  	
}

void printCount(int count)
{
    int DECENA = count / 10;
    int UNIDAD = count % 10;
	
  	prendeDigito(Apagados);
  	printDigit(DECENA);  
  	prendeDigito(decena);
    
  
  	prendeDigito(Apagados);
  
    printDigit(UNIDAD);
  	prendeDigito(unidad);
    
  	
  	//Serial.println(UNIDAD);
}

int KeyPressed(void)
{
    int suma = digitalRead(pulsador_mas);
    int resta = digitalRead(pulsador_menos);
    int reset = digitalRead(pulsador_reset);
    if (suma)
    {
        sumaPrevia = 1;
    }
    if (resta)
    {
        restaPrevia = 1;
    }
    if (reset)
    {
        resetPrevia = 1;
    }

    if (suma == 0 && suma != sumaPrevia)
    {
        sumaPrevia = suma;
        return pulsador_mas;
    }
    if (resta == 0 && resta != restaPrevia)
    {
        restaPrevia = resta;
        return pulsador_menos;
    }
    if (reset == 0 && reset != resetPrevia)
    {
        resetPrevia = reset;
        return pulsador_reset;
    }
    return 0;
}

bool esPrimo(int n)
{
  if (n <= 1)
  {
    return false;  // Los nÃºmeros menores o iguales a 1 no son primos
  }

  for (int i = 2; i < n; i++)
  {
    if (n % i == 0)
    {
      return false; // Si n es divisible por i, entonces n no es primo
    }
  }

  return true; // Si no se encontraron divisores, n es primo
}

int obtenerNumeroPrimoSiguiente(int num)
{
  int siguiente = num + 1;
  while (!esPrimo(siguiente))
  {
    siguiente++;
  }
  return siguiente;
}

int obtenerNumeroPrimoAnterior(int num)
{
  int anterior = num - 1;
  while (anterior >= 2)
  {
    if (esPrimo(anterior))
    {
      return anterior;
    }
    anterior--;
  }
}